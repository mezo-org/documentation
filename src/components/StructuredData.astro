---
import config from 'virtual:starlight/user-config';
---
{ /* Head SSR moved to Head.astro; keep only client-side FAQ/HowTo here */ }

{
  /* Client-side detection for FAQPage and HowTo. Inject JSON-LD if suitable blocks are found. */
}
<script is:inline>
  (function () {
    try {
      const site = (document.querySelector('link[rel="canonical"]')?.getAttribute('href') || location.origin) as string;

      // FAQ detection: find h2 matching /faq/i, then h3 as questions with following siblings as answers
      const faqRoot = Array.from(document.querySelectorAll('h2, h3')) as HTMLElement[];
      let hasFAQ = false;
      const qa: any[] = [];
      for (let i = 0; i < faqRoot.length; i++) {
        const el = faqRoot[i];
        if (el.tagName === 'H2' && /\bfaq(s)?\b/i.test(el.textContent || '')) {
          // Collect until next H2
          let j = i + 1;
          while (j < faqRoot.length && faqRoot[j].tagName !== 'H2') {
            const qEl = faqRoot[j];
            if (qEl.tagName === 'H3') {
              const question = (qEl.textContent || '').trim();
              // Answer: next elements until next heading
              let answer = '';
              let node: HTMLElement | null = qEl.nextElementSibling as HTMLElement;
              while (node && !/^H[2-3]$/.test(node.tagName)) {
                if (node.tagName === 'P' || node.tagName === 'UL' || node.tagName === 'OL') {
                  answer += ' ' + node.textContent?.trim();
                }
                node = node.nextElementSibling as HTMLElement;
              }
              if (question && answer) {
                hasFAQ = true;
                qa.push({
                  '@type': 'Question',
                  name: question,
                  acceptedAnswer: { '@type': 'Answer', text: answer.trim() },
                });
              }
            }
            j++;
          }
        }
      }

      if (hasFAQ && qa.length) {
        const faq = {
          '@context': 'https://schema.org',
          '@type': 'FAQPage',
          mainEntity: qa,
        };
        const s = document.createElement('script');
        s.type = 'application/ld+json';
        s.textContent = JSON.stringify(faq);
        document.head.appendChild(s);
      }

      // HowTo detection: look for ordered lists under headings that imply procedures
      const howToHeads = Array.from(document.querySelectorAll('h2, h3')) as HTMLElement[];
      for (const h of howToHeads) {
        if (/how to|borrow and mint|bridge your assets|bridge assets|deploy your dapp/i.test(h.textContent || '')) {
          const ol = h.nextElementSibling as HTMLElement;
          if (ol && ol.tagName === 'OL') {
            const steps = Array.from(ol.querySelectorAll('li')).map((li, idx) => ({
              '@type': 'HowToStep',
              position: idx + 1,
              name: (li.textContent || '').trim().slice(0, 100),
              text: (li.textContent || '').trim(),
            }));
            if (steps.length >= 2) {
              const howTo = {
                '@context': 'https://schema.org',
                '@type': 'HowTo',
                name: (document.title || 'How to'),
                step: steps,
              };
              const s = document.createElement('script');
              s.type = 'application/ld+json';
              s.textContent = JSON.stringify(howTo);
              document.head.appendChild(s);
              break;
            }
          }
        }
      }
    } catch (e) {
      // no-op
    }
  })();
</script>


