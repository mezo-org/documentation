---
import config from 'virtual:starlight/user-config';
import type { Props } from '../props';

import LanguageSelect from 'virtual:starlight/components/LanguageSelect';
import Search from 'virtual:starlight/components/Search';
import SiteTitle from 'virtual:starlight/components/SiteTitle';
import SocialIcons from 'virtual:starlight/components/SocialIcons';
import ThemeSelect from 'virtual:starlight/components/ThemeSelect';
import StructuredData from '../components/StructuredData.astro';

/**
 * Render the `Search` component if Pagefind is enabled or the default search component has been overridden.
 */
const shouldRenderSearch =
	config.pagefind || config.components.Search !== '@astrojs/starlight/components/Search.astro';
---

<div class="header sl-flex">
  <StructuredData {...Astro.props} />
  {
    (() => {
      const siteHref = Astro.site?.href ?? 'https://mezo.org/docs';
      const url = siteHref.replace(/\/$/, '') + Astro.url.pathname;
      const fm = (Astro.props as any)?.frontmatter ?? {};
      const title = fm.title ?? (Astro.props as any)?.title ?? 'Mezo Documentation';
      const description = fm.description ?? (Astro.props as any)?.description ?? 'Mezo Documentation';
      const webPage = {
        '@context': 'https://schema.org',
        '@type': ['WebPage', 'TechArticle'],
        headline: title,
        name: title,
        description,
        url,
        publisher: {
          '@type': 'Organization',
          name: 'Mezo',
          logo: {
            '@type': 'ImageObject',
            url: 'https://raw.githubusercontent.com/mezo-org/documentation/main/src/assets/Mezo-Mark-Red.svg',
          },
          sameAs: [
            'https://github.com/mezo-org',
            'https://x.com/MezoNetwork',
            'https://discord.mezo.org',
          ],
        },
      };
      return <script type="application/ld+json" set:html={JSON.stringify(webPage)} />;
    })()
  }
  {
    (() => {
      const siteHref = Astro.site?.href ?? 'https://mezo.org/docs';
      const origin = siteHref.replace(/\/$/, '');
      const path = Astro.url.pathname.replace(/\/$/, '');
      const parts = path.split('/').filter(Boolean);
      if (!parts.length) return null;
      const labelMap: Record<string, string> = {
        docs: 'Documentation',
        users: 'User Documentation',
        developers: 'Developer Documentation',
        mainnet: 'Mainnet',
        musd: 'MUSD',
        features: 'Features',
        resources: 'Resources',
        'getting-started': 'Getting Started',
        introduction: 'Introduction',
        bridge: 'Bridge',
        'stbtc-staked-bitcoin': 'stBTC',
        architecture: 'Architecture',
        oracles: 'Oracles',
      };
      const fm = (Astro.props as any)?.frontmatter ?? {};
      const finalTitle = fm.title ?? (Astro.props as any)?.title;
      const items: any[] = [];
      let acc = '';
      parts.forEach((seg, idx) => {
        acc += '/' + seg;
        const isLast = idx === parts.length - 1;
        const name = isLast && finalTitle ? finalTitle : (labelMap[seg] ?? seg.replace(/-/g, ' '));
        items.push({
          '@type': 'ListItem',
          position: idx + 1,
          name,
          item: origin + acc + '/',
        });
      });
      const breadcrumb = {
        '@context': 'https://schema.org',
        '@type': 'BreadcrumbList',
        itemListElement: items,
      };
      return <script type="application/ld+json" set:html={JSON.stringify(breadcrumb)} />;
    })()
  }

	<div class="sl-hidden md:sl-flex print:hidden left-group">
		<div class="title-wrapper sl-flex">
			<SiteTitle {...Astro.props} />
		</div>
		<div class="audience-selector">
		<a href="test.txt">Users</a>
		<a href="test.txt">Developers</a>
		</div>
	</div>
	<div class="sl-hidden md:sl-flex print:hidden right-group">
		<div class="sl-flex print:hidden">
			{shouldRenderSearch && <Search {...Astro.props} />}
		</div>
		<div class="sl-flex social-icons">
			<SocialIcons {...Astro.props} />
		</div>
		<ThemeSelect {...Astro.props} />
		<LanguageSelect {...Astro.props} />
	</div>
</div>

<style>
	.header {
		gap: var(--sl-nav-gap);
		justify-content: space-between;
		align-items: center;
		height: 100%;
	}

	.title-wrapper {
		/* Prevent long titles overflowing and covering the search and menu buttons on narrow viewports. */
		overflow: clip;
		/* Avoid clipping focus ring around link inside title wrapper. */
		padding: 0.25rem;
		margin: -0.25rem;
		min-width: 0;
	}

	.audience-selector {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin: auto;
		font-weight: bold;
	}

	.left-group {
		display: flex;
		justify-content: flex-start;
		gap: 1rem;
	}

	.right-group,
	.social-icons {
		gap: 1rem;
		align-items: center;
		justify-content: flex-end;
	}

	.social-icons::after {
		content: '';
		height: 2rem;
		border-inline-end: 1px solid var(--sl-color-gray-5);
	}

	@media (min-width: 50rem) {
		:global(:root[data-has-sidebar]) {
			--__sidebar-pad: calc(2 * var(--sl-nav-pad-x));
		}
		:global(:root:not([data-has-toc])) {
			--__toc-width: 0rem;
		}
		.header {
			--__sidebar-width: max(0rem, var(--sl-content-inline-start, 0rem) - var(--sl-nav-pad-x));
			--__main-column-fr: calc(
				(
						100% + var(--__sidebar-pad, 0rem) - var(--__toc-width, var(--sl-sidebar-width)) -
							(2 * var(--__toc-width, var(--sl-nav-pad-x))) - var(--sl-content-inline-start, 0rem) -
							var(--sl-content-width)
					) / 2
			);
			display: grid;
			grid-template-columns:
        /* 1 (site title): runs up until the main content columnâ€™s left edge or the width of the title, whichever is the largest  */
				minmax(
					calc(var(--__sidebar-width) + max(0rem, var(--__main-column-fr) - var(--sl-nav-gap))),
					auto
				)
				/* 2 (search box): all free space that is available. */
				1fr
				/* 3 (right items): use the space that these need. */
				auto;
			align-content: center;
		}
	}
</style>